function [Mask_all] = Load_mask(Sample_Set_arranged,Mask_all,i)
% LOAD_MASK: Load segmentation mask for each image as mat- or tiff-file.
% The mask is generated by CellProfiler. The segmentation masks include the
% cells only. Extra cellular mask not implemented yet.
% This function checks for .mat files hardcoded as cell.mat or mask.mat. If
% not found manual selection is used.
%
% Input variable:
% Sample_Set_arranged --> paths all sample folders in session (historical)
% Mask_all --> segmentation masks of all samples in session(matrices)
% i --> loop variable for Sample_Set_arranged folder number
%
% Output variables:
% Mask_all --> structure containing all segmentation masks of session,
% including the newly loaded ones
%
% Histology Topography Cytometry Analysis Toolbox (histoCAT)
% Denis Schapiro - Bodenmiller Group - UZH

%If Mask_all doesn't exist yet, create it
if isempty(Mask_all) == 1
    Mask_all = struct('Image',[]);
end

%If sample is present
if cellfun(@isempty,Sample_Set_arranged(i)) == 0
    
    %Check if mask exists in sample folder
    
    %Get all the files in the sample folder
    addpath("/home/yusuf/Hiwi/histoCAT/histoCAT/3rdParty/")
    fileList = getAllFiles(char(Sample_Set_arranged(i)));
    
    %Check if matfile exist
    maskfound = find(~cellfun('isempty',regexpi(fileList,'[.]mat')))';
    
    %If mask exists as a tiff file. Only one!
    selectedtiff = find(~cellfun('isempty',regexpi(fileList,'_mask.tif*|.mask.tif*')))';
    
    %If a tiff-mask was found
    if isempty(selectedtiff) == 0
        
        MaskDir = fileList{selectedtiff};
        %Load mask
        Mask_all(i).Image = imread(char(MaskDir));
        
    %If no mask was found
    elseif isempty(maskfound) == 1 
        
        %Ask user whether mask exists as tiff-file
        quest_mask = questdlg(sprintf('Is there a mask in sample %s ?',Sample_Set_arranged{i}),'mask as .tiff','Yes','No','Cancel');
        
        if strcmp(quest_mask,'Yes') == 1
            %Extract tiffs, user has to specify which file is the mask
            tiff_position = find(~cellfun('isempty',regexp(fileList,'\.tif*')))';
            [selectedtiff,~] = listdlg('PromptString','Select the mask to consider:',...
                'SelectionMode','single',...
                'ListSize',[160,150],...
                'ListString',fileList(tiff_position));
            
            if isempty(selectedtiff) ~= 1
                MaskDir = fileList{tiff_position(selectedtiff)};
            else
                Mask_all(i) = struct('Image',[]);
                return;
            end
            
            %Load mask into matrix
            try
                Mask_all(i).Image = imread(char(MaskDir));
            catch
                %Try loading the data normally
                type_load = imread(char(MaskDir));
                %Check the type, if it is not struct
                if isstruct(type_load) == 0 && isempty(type_load) ~= 1
                    %Store as int32 into Mask's image
                    Mask_all(i).Image = int32(type_load);
                    %If is empty
                elseif isempty(type_load) == 1
                    Mask_all(i) = struct('Image',[]);
                    %If is struct then convert it to array and store into Image
                elseif isstruct(type_load) == 1 && isempty(type_load) ~= 1
                    Mask_all(i).Image = struct2array(type_load);
                end
            end
            
        else
            %Mask has to be either tiff or mat format
            disp('Only .mat or .tif* files are supported/recognized as masks by histoCAT, Continuing..');
            Mask_all(i) = struct('Image',[]);
        end
        
    %If mat-file mask was found
    else
        %Extract .mats based on pattern (HARDCODED!!!)
        mask_pos = find(~cellfun('isempty',regexpi(fileList,'(cells.mat)|(mask.mat)')))';
        
        %If the pattern was not found and only one mat file
        %present, take this one
        if (isempty(mask_pos) == 1 && numel(maskfound) == 1) || (isempty(mask_pos) ~= 1 && numel(maskfound) == 1) 
            mask_position = maskfound;
            
        %If there are many masks but one was by the name cells.mat or
        %mask.mat, then consider that
        elseif (numel(mask_pos) == 1 && numel(maskfound) > 1)
            mask_position = mask_pos;
            
        %If pattern not found but there are other mat files or there are
        %multiple pattern related mat files found, then ask user
        elseif (isempty(mask_pos) == 1 && numel(maskfound) > 1)
            [selected,~] = listdlg('PromptString','Select the mask to consider:',...
                'SelectionMode','single',...
                'ListSize',[160,150],...
                'ListString',fileList(maskfound));
            mask_position = maskfound(selected);
            
        %If multiple are found, ask user
        elseif (numel(mask_pos) > 1)
            [selected,~] = listdlg('PromptString','Select the mask to consider:',...
                'SelectionMode','single',...
                'ListSize',[160,150],...
                'ListString',fileList(mask_pos));
            mask_position = mask_pos(selected);
        end
        
        %If still no mask found, leave empty
        if isempty(mask_position) == 1
            MaskDir = [];
            
        %Otherwise load mask
        else
            MaskDir = fileList{mask_position};
            %Load it into matrix
            try
                Mask_all(i) = load(char(MaskDir));
                %Else end function(for next sample)
            catch
                %Try loading the data normally
                type_load = load(char(MaskDir));
                %Check the type, if it is not struct
                if isstruct(type_load) == 0 && isempty(type_load) ~= 1
                    %Store as int32 into Mask's image
                    Mask_all(i).Image = int32(type_load);
                    %If is empty
                elseif isempty(type_load) == 1
                    Mask_all(i) = struct('Image',[]);
                    %If is struct then convert it to array and store into Image
                elseif isstruct(type_load) == 1 && isempty(type_load) ~= 1
                    Mask_all(i).Image = struct2array(type_load);
                end
            end
        end
    end
    
%If no sample was found, leave empty
else
    MaskDir = [];
end

%If there are some numbers missing to the cellIDs generated by
%cellProfiler, replace all of them, so there won't be missing cellIDs
%anymore
try quest_mask;
    if strcmp(quest_mask,'No') ~= 1 %if there was a mask
        cellIDs = unique(Mask_all(i).Image);
        cellIDs = cellIDs(cellIDs~=0);
        if ~isempty(setdiff(1:cellIDs(length(cellIDs)),cellIDs))
           [a,b] = ismember(Mask_all(i).Image,cellIDs);
           newIds = 1:length(cellIDs);
           Mask_all(i).Image(a) =  newIds(b(a));
        end
        %Save original cellIDs in order to be able to map the cells back to
        %other cellProfiler output (the original cellIDs will be reassigned when exporting as CSV/fcs)
        CellIDs_by_CellProfiler = retr('CellIDs_by_CellProfiler');
        CellIDs_by_CellProfiler{i} = cellIDs;
        put('CellIDs_by_CellProfiler',CellIDs_by_CellProfiler);
    end
catch
    cellIDs = unique(Mask_all(i).Image);
    cellIDs = cellIDs(cellIDs~=0);
    %if there was a mask and some cellIDs are missing, replace them
    if ~isempty(setdiff(1:cellIDs(length(cellIDs)),cellIDs))
       [a,b] = ismember(Mask_all(i).Image,cellIDs);
       newIds = 1:length(cellIDs);
       Mask_all(i).Image(a) =  newIds(b(a));
    end
    
    %Save original cellIDs in order to be able to map the cells back to
    %other cellProfiler output (the original cellIDs will be reassigned when exporting as CSV/fcs)
    CellIDs_by_CellProfiler = retr('CellIDs_by_CellProfiler');
    CellIDs_by_CellProfiler{i} = cellIDs;
    put('CellIDs_by_CellProfiler',CellIDs_by_CellProfiler);
end



end